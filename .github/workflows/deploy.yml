name: Deploy React to S3

on:
  push:
    branches:
      - main  # 'main' 브랜치에 push가 있을 때 트리거됩니다.

jobs:
  build:
    runs-on: ubuntu-latest  # Ubuntu 최신 버전에서 실행됩니다.

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3  # 코드 레포지토리에서 소스를 체크아웃합니다.

      - name: Cache node modules
        uses: actions/cache@v3  # 의존성 캐싱으로 빌드 시간을 최적화합니다.
        with:
          path: dramapick-react/node_modules  # 'node_modules' 경로 캐시
          key: ${{ runner.OS }}-build-${{ hashFiles('**/dramapick-react/package-lock.json') }}  # 패키지 잠금 파일을 기준으로 캐시 키 생성
          restore-keys: |
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-

      - name: Install Dependencies
        run: |
          cd dramapick-react  # 'dramapick-react' 디렉토리로 이동
          npm install  # 필요한 의존성을 설치

      - name: Create .env file with environment variables
        run: |
          cd dramapick-react  # 'dramapick-react' 디렉토리로 이동

          cat <<EOF > .env
          REACT_APP_AWS_REG=${{ secrets.REACT_APP_AWS_REG }}
          REACT_APP_AWS_KEY=${{ secrets.AWS_ACCESS_KEY_ID }}
          REACT_APP_AWS_SEC=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          REACT_APP_AWS_BUCKET=${{ secrets.AWS_BUCKET_NAME }}
          EO

      - name: Build React app
        run: |
          cd dramapick-react  # 'dramapick-react' 디렉토리로 이동
          npm run build  # React 애플리케이션을 빌드

      - name: Deploy to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd dramapick-react  # 'dramapick-react' 디렉토리로 이동
          aws s3 cp \
            --recursive \
            --region ap-northeast-2 \
            build s3://${{ secrets.AWS_BUCKET_NAME }}  # 환경 변수로 설정된 S3 버킷에 업로드